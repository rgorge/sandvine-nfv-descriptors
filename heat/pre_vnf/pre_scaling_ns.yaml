heat_template_version: 2016-04-08


description: >
  A  PRE VNF 

parameters:

  management_network:
    type: string

  service_network:
    type: string

  qsync_network:
    type: string

  flowsync_network:
    type: string

  service_instance_fqname:
    type: string

  trans_int_net_fqname:
    type: string

  trans_ext_net_fqname:
    type: string

  name:
    type: string
    default: pre2

  flavor:
    type: string
    default: PRE-FLAVOR


  channel_networks:
    type: comma_delimited_list

  channel_ports:
    type: comma_delimited_list

  channel_networks_count:
    type: number

  management_provider_network:
    type: string

  dns_domain:
    type: string

resources:

# Port Tuple object for PRE service instance

  PortTuple_scaling:
    type: OS::ContrailV2::PortTuple
    properties:
      service_instance: { get_param: service_instance_fqname } 

# PRE VM port in VN-left, attached to Port Tuple 

  si_pre_left_scaling:
    type: OS::ContrailV2::VirtualMachineInterface
    depends_on: [ PortTuple_scaling ]
    properties:
      virtual_machine_interface_properties:
        {
          virtual_machine_interface_properties_service_interface_type: "left",
        }
      port_tuple_refs: [{ get_resource: PortTuple_scaling }]
      virtual_network_refs: [ { get_param: trans_int_net_fqname } ]

#
## PRE VM port in VN-right, attached to Port Tuple 
#
  si_pre_right_scaling:
    type: OS::ContrailV2::VirtualMachineInterface
    depends_on: [ PortTuple_scaling ]
    properties:
      virtual_machine_interface_properties:
        {
          virtual_machine_interface_properties_service_interface_type: "right",
        }
      port_tuple_refs: [{ get_resource: PortTuple_scaling }]
      virtual_network_refs: [ { get_param: trans_ext_net_fqname } ]

#
## PRE VM port IP address 
#
  si_pre_iip_left_scaling:
    type: OS::ContrailV2::InstanceIp
    depends_on: [ si_pre_left_scaling ]
    properties:
      virtual_machine_interface_refs: [{ get_resource: si_pre_left_scaling }]
      virtual_network_refs: [{ get_param: trans_int_net_fqname }]

## PRE VM port IP address 

  si_pre_iip_right_scaling:
    type: OS::ContrailV2::InstanceIp
    depends_on: [ si_pre_right_scaling ]
    properties:
      virtual_machine_interface_refs: [{ get_resource: si_pre_right_scaling }]
      virtual_network_refs: [{ get_param: trans_ext_net_fqname }]

  servers:
    type: packetlogic::pre::vnfc
    properties:
      name: { get_param: name }
      flavor: { get_param: flavor }
      image: PLOS
      management_ports: [{get_attr: [management_port,show,id]},{get_attr: [service_port,show,id]},{get_attr: [qsync_port,show,id]},{get_attr: [dummy_port,show,id]},{get_attr: [flowsync_port,show,id]}] 
      channel_ports: [ { get_attr: [ si_pre_left_scaling, show,uuid ] }, { get_attr: [ si_pre_right_scaling,show,uuid ] } ]



  management_port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: management_network }
      port_security_enabled: true
#      security_groups: [ pre-security-group ]


  service_port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: service_network }
      port_security_enabled: true
#      security_groups:  [ pre-security-group ]


  qsync_port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: qsync_network }
      port_security_enabled: false

  dummy_port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: qsync_network }
      port_security_enabled: false


  flowsync_port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: flowsync_network }
      port_security_enabled: false


  fip: 
    type: OS::Neutron::FloatingIP
    properties: 
      floating_network: { get_param: management_provider_network }
####      dns_domain: { get_param: dns_domain }
####      dns_name: { get_param: name }
#
  fip_assign:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: fip }
      port_id: { get_resource: management_port }





outputs:
  lengden:
    value: { get_param: channel_networks_count }
#      yaql:
#        expression: $.data.list_param.len()
#        data:
#          list_param: {get_param: channel_networks}    